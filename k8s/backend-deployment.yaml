apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${BACKEND_SERVICE_NAME}
  namespace: ${K8S_NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${BACKEND_SERVICE_NAME}
  template:
    metadata:
      labels:
        app: ${BACKEND_SERVICE_NAME}
    spec:
      imagePullSecrets:
      ${IMAGE_PULL_SECRETS}
      containers:
      - name: backend
        image: ${BACKEND_IMAGE}
        imagePullPolicy: ${IMAGE_PULL_POLICY}
        ports:
        - containerPort: 5000
        env:
        - name: MYSQL_HOST
          value: "${MYSQL_HOST}"
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: MYSQL_PASSWORD
        - name: REDIS_HOST
          value: "${REDIS_HOST}-master"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: REDIS_PASSWORD
        - name: MESSAGING_TYPE
          value: "${MESSAGING_TYPE}"
        - name: KAFKA_SERVERS
          value: "${KAFKA_SERVERS}:9092"
        - name: KAFKA_USERNAME
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: KAFKA_USERNAME
        - name: KAFKA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: KAFKA_PASSWORD
        - name: EVENTHUB_CONNECTION_STRING
          value: "${EVENTHUB_CONNECTION_STRING}"
        - name: EVENTHUB_NAME
          value: "${EVENTHUB_NAME}"
        - name: EVENTHUB_CONSUMER_GROUP
          value: "${EVENTHUB_CONSUMER_GROUP}"
        - name: FLASK_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: backend-secrets
              key: FLASK_SECRET_KEY
        - name: TEMPO_ENDPOINT
          value: "${TEMPO_ENDPOINT}"
        - name: OTLP_ENDPOINT
          value: "${OTLP_ENDPOINT}"
        - name: BACKEND_SERVICE_NAME
          value: "${BACKEND_SERVICE_NAME}"
---
apiVersion: v1
kind: Service
metadata:
  name: ${BACKEND_SERVICE_NAME}-service
  namespace: ${K8S_NAMESPACE}
spec:
  type: ClusterIP
  selector:
    app: ${BACKEND_SERVICE_NAME}
  ports:
  - port: 5000
    targetPort: 5000 